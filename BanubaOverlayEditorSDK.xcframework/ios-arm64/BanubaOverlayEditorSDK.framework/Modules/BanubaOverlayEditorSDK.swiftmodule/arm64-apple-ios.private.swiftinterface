// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BanubaOverlayEditorSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import BanubaOverlayEditorSDK
import BanubaUtilities
import CoreMedia
import Foundation
import Swift
import UIKit
import VEEffectsSDK
import VEPlaybackSDK
import VideoEditor
import _Concurrency
import _StringProcessing
public struct OverlayEditorConfiguration {
  public var mainOverlayViewControllerConfig: BanubaOverlayEditorSDK.MainOverlayViewControllerConfig
  public var overlayType: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`
  public var selectedOverlayItem: BanubaOverlayEditorSDK.OverlayItem?
  public static var `default`: BanubaOverlayEditorSDK.OverlayEditorConfiguration {
    get
  }
  public init(mainOverlayViewControllerConfig: BanubaOverlayEditorSDK.MainOverlayViewControllerConfig, overlayType: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`, selectedOverlayItem: BanubaOverlayEditorSDK.OverlayItem? = nil)
}
public struct MainOverlayViewControllerConfig {
  public var addButtons: [BanubaOverlayEditorSDK.OverlayAddButtonConfig]
  public var editButtonsHeight: CoreFoundation.CGFloat
  public var editButtonsInteritemSpacing: CoreFoundation.CGFloat
  public var editCompositionButtons: [BanubaOverlayEditorSDK.OverlayEditButtonConfig]
  public var controlButtons: [BanubaOverlayEditorSDK.OverlayControlButtonConfig]
  public var playerControlsHeight: CoreFoundation.CGFloat
  public var mainLabelColors: UIKit.UIColor
  public var additionalLabelColors: UIKit.UIColor
  public var additionalLabelFonts: UIKit.UIFont
  public var cursorColor: UIKit.UIColor
  public var audioWaveConfiguration: BanubaOverlayEditorSDK.OverlayItemConfiguration
  public var resizeImageName: Swift.String
  public var draggersHorizontalInset: CoreFoundation.CGFloat
  public var draggersWidth: CoreFoundation.CGFloat?
  public var draggersHeight: CoreFoundation.CGFloat?
  public var draggersImageHeight: CoreFoundation.CGFloat?
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var playerControlsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var defaultLinesCount: Swift.Int
  public var timelineCornerRadius: CoreFoundation.CGFloat
  public var draggerBackgroundColor: UIKit.UIColor
  public var draggerCornerRadius: CoreFoundation.CGFloat?
  public var timeLabelsOffset: CoreFoundation.CGFloat
  public var itemsTopOffset: CoreFoundation.CGFloat
  public var alertConfig: BanubaUtilities.AlertViewConfiguration
  public var previewViewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
}
public struct OverlayAddButtonConfig {
  public enum `Type` : Swift.String {
    case text
    case sticker
    case blur
    public var editioEffectType: VideoEditor.EditorEffectType {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`
  public let title: Swift.String
  public let titleColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public let imageName: Swift.String
  public var drawableFigure: BanubaUtilities.DrawableFigure?
  public init(type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`, title: Swift.String, titleColor: UIKit.UIColor, font: UIKit.UIFont, imageName: Swift.String, drawableFigure: BanubaUtilities.DrawableFigure? = nil)
}
public struct OverlayEditButtonConfig {
  public enum `Type` : Swift.String {
    case edit
    case delete
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaOverlayEditorSDK.OverlayEditButtonConfig.`Type`
  public let title: Swift.String
  public let titleColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public let imageName: Swift.String
  public let selectedImageName: Swift.String?
  public init(type: BanubaOverlayEditorSDK.OverlayEditButtonConfig.`Type`, title: Swift.String, titleColor: UIKit.UIColor, font: UIKit.UIFont, imageName: Swift.String, selectedImageName: Swift.String?)
}
public struct OverlayControlButtonConfig {
  public enum `Type` : Swift.String {
    case reset
    case play
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaOverlayEditorSDK.OverlayControlButtonConfig.`Type`
  public let imageName: Swift.String?
  public let selectedImageName: Swift.String?
  public let imageEdgeInsets: UIKit.UIEdgeInsets?
  public var style: BanubaUtilities.TextConfiguration?
  public init(type: BanubaOverlayEditorSDK.OverlayControlButtonConfig.`Type`, imageName: Swift.String? = nil, selectedImageName: Swift.String? = nil, imageEdgeInsets: UIKit.UIEdgeInsets? = nil, style: BanubaUtilities.TextConfiguration? = nil)
}
public struct OverlayItemConfiguration {
  public var isRandomWaveColor: Swift.Bool
  public var backgroundColor: UIKit.UIColor?
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CoreFoundation.CGFloat
  public var borderWidth: CoreFoundation.CGFloat
  public var borderInset: CoreFoundation.CGFloat
  public var height: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont?
  public var titleColor: UIKit.UIColor?
  public var imageInset: UIKit.UIEdgeInsets
}
public typealias TextButtonConfig = BanubaOverlayEditorSDK.OverlayEditor.TextButtonConfig
public struct OverlayEditor {
  public struct TextButtonConfig {
    public var font: UIKit.UIFont
    public var color: UIKit.UIColor
    public var title: Swift.String
  }
}
public protocol OverlayEditorPlayablePreview : BanubaOverlayEditorSDK.OverlayItemDisplayable, VEPlaybackSDK.PlayableViewController {
}
public struct GradientColorPair {
  public var gradientColors: [UIKit.UIColor]
  public var textColor: UIKit.UIColor
  public init(gradientColors: [UIKit.UIColor], textColor: UIKit.UIColor)
}
@_hasMissingDesignatedInitializers final public class OverlayItemLinePosition : Swift.Equatable, Swift.Hashable {
  final public var orderNumber: Swift.Int
  public static func == (lhs: BanubaOverlayEditorSDK.OverlayItemLinePosition, rhs: BanubaOverlayEditorSDK.OverlayItemLinePosition) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public protocol OverlayItem : Foundation.NSCopying {
  var id: Swift.String { get }
  var image: UIKit.UIImage { get set }
  var startTime: CoreMedia.CMTime { get set }
  var endTime: CoreMedia.CMTime { get set }
  var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle { get }
  var isEditable: Swift.Bool { get }
  var frame: CoreFoundation.CGRect { get set }
  var transform: CoreFoundation.CGAffineTransform { get set }
  var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`? { get }
  var position: BanubaOverlayEditorSDK.OverlayItemLinePosition? { get set }
  var order: Swift.Int { get set }
}
public enum OverlayItemPresentationStyle : Swift.Equatable {
  case text(Swift.String)
  case image(UIKit.UIImage)
  case blur(Swift.String)
  public static func == (a: BanubaOverlayEditorSDK.OverlayItemPresentationStyle, b: BanubaOverlayEditorSDK.OverlayItemPresentationStyle) -> Swift.Bool
}
public class VideoOverlayObjectWithBlur : BanubaOverlayEditorSDK.OverlayItem {
  public var blurEffectId: Swift.UInt
  public var blurCoordinateParams: BanubaUtilities.BlurCoordinateParams
  final public let id: Swift.String
  public var image: UIKit.UIImage
  public var blurView: UIKit.UIView
  public var blurFigure: BanubaUtilities.DrawableFigure
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var titleIndex: Swift.Int
  public var isEditable: Swift.Bool {
    get
  }
  public var frame: CoreFoundation.CGRect
  public var transform: CoreFoundation.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`?
  public var position: BanubaOverlayEditorSDK.OverlayItemLinePosition?
  public var order: Swift.Int
  public init(id: Swift.String, blurEffectId: Swift.UInt, blurView: UIKit.UIView, blurFigure: BanubaUtilities.DrawableFigure, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, blurCoordinateParams: BanubaUtilities.BlurCoordinateParams, frame: CoreFoundation.CGRect = .zero, transform: CoreFoundation.CGAffineTransform = .identity, titleIndex: Swift.Int, order: Swift.Int = .zero)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension BanubaOverlayEditorSDK.VideoOverlayObjectWithBlur : Swift.Equatable {
  public static func == (lhs: BanubaOverlayEditorSDK.VideoOverlayObjectWithBlur, rhs: BanubaOverlayEditorSDK.VideoOverlayObjectWithBlur) -> Swift.Bool
}
public protocol BanubaOverlayEditorDelegate : AnyObject {
  func banubaOverlayEditor(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor, didChooseOverlayWithId id: Swift.String)
  func banubaOverlayEditor(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor, didAddBlurItem blurItem: BanubaOverlayEditorSDK.VideoOverlayObjectWithBlur)
  func banubaOverlayEditor(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor, didChangeBlurItem blurItem: BanubaOverlayEditorSDK.VideoOverlayObjectWithBlur)
  func banubaOverlayEditor(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor, didDeleteBlurItem blurItem: BanubaOverlayEditorSDK.OverlayItem)
  func banubaOverlayEditorDidDone(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor, withOverlayItems overlayItems: [BanubaOverlayEditorSDK.OverlayItem]?)
  func banubaOverlayEditorDidCancel(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor)
  func banubaOverlayEditor(overlayEditor: BanubaOverlayEditorSDK.BanubaOverlayEditor, didPresent message: Swift.String)
}
public protocol OverlayItemProducibleViewControllerDelegate : AnyObject {
  func overlayItemProducibleViewControllerDidDone(viewController: BanubaOverlayEditorSDK.OverlayItemProducibleViewController, with overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  func overlayItemProducibleViewControllerDidCancel(viewController: BanubaOverlayEditorSDK.OverlayItemProducibleViewController)
  func overlayItemProducibleViewController(viewController: BanubaOverlayEditorSDK.OverlayItemProducibleViewController, didPresent message: Swift.String)
}
public protocol OverlayItemProducibleViewController : UIKit.UIViewController {
  var delegate: BanubaOverlayEditorSDK.OverlayItemProducibleViewControllerDelegate? { get set }
}
public protocol OverlayItemProducersViewControllerFactory : AnyObject {
  func makeOverlayItemProducibleViewController(for overlayItem: BanubaOverlayEditorSDK.OverlayItem) -> BanubaOverlayEditorSDK.OverlayItemProducibleViewController?
  func makeOverlayItemProducibleViewController(for type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`) -> BanubaOverlayEditorSDK.OverlayItemProducibleViewController
}
public class BanubaOverlayEditor {
  weak public var delegate: BanubaOverlayEditorSDK.BanubaOverlayEditorDelegate?
  final public let configuration: BanubaOverlayEditorSDK.OverlayEditorConfiguration
  public init(overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration, playablePreview: BanubaOverlayEditorSDK.OverlayEditorPlayablePreview, timeLineDataSource: BanubaUtilities.TimeLineDataSource, overlayItemProducersViewControllerFactory: BanubaOverlayEditorSDK.OverlayItemProducersViewControllerFactory)
  public func presentOverlayEditor(from hostController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func dismissOverlayEditor(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc deinit
}
public protocol OverlayItemConsumable : UIKit.UIViewController {
  func getExistingOverlayItems() -> [BanubaOverlayEditorSDK.OverlayItem]
  func addOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  func updateOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  func updateOverlayItemOrder(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  func removeOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
  func moveOverlayItem(_ overlayItem: BanubaOverlayEditorSDK.OverlayItem)
}
public protocol OverlayItemDisplayable : BanubaOverlayEditorSDK.OverlayItemConsumable {
  var needsToSelectOverlayItemLineView: ((Swift.String?) -> Swift.Void)? { get set }
  var needsToSetupStateOverlayItem: ((Swift.String) -> Swift.Void)? { get set }
  func hideOverlayItems()
  func showOverlayItems()
  func reloadOverlayItems()
  func didVideoPlay(atTime time: CoreMedia.CMTime)
  func deselectAllOverlayItems()
}
extension BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type` : Swift.Equatable {}
extension BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type` : Swift.Hashable {}
extension BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaOverlayEditorSDK.OverlayEditButtonConfig.`Type` : Swift.Equatable {}
extension BanubaOverlayEditorSDK.OverlayEditButtonConfig.`Type` : Swift.Hashable {}
extension BanubaOverlayEditorSDK.OverlayEditButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaOverlayEditorSDK.OverlayControlButtonConfig.`Type` : Swift.Equatable {}
extension BanubaOverlayEditorSDK.OverlayControlButtonConfig.`Type` : Swift.Hashable {}
extension BanubaOverlayEditorSDK.OverlayControlButtonConfig.`Type` : Swift.RawRepresentable {}
